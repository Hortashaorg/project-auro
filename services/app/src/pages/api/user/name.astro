---
import { throwError } from "@package/common";
import { getDB } from "@package/database";
import LoggedIn from "@sections/home/LoggedIn.astro";
import { parseFormData, validateFormData } from "@utils/parse";
import { z } from "astro:content";

const params = await parseFormData(Astro.request);

const userForm = z.object({
	nickname: z
		.string()
		.min(3, { message: "Nickname must be at least 3 characters long" })
		.max(20, { message: "Nickname must be at most 20 characters long" })
		.regex(/^[a-zA-Z0-9_\s]+$/, {
			message: "Nickname can only contain letters, numbers, and underscores",
		})
		.refine((val) => /[a-zA-Z]/.test(val), {
			message: "Nickname must contain at least one letter",
		})
		.refine((val) => !/^\d+$/.test(val), {
			message: "Nickname cannot consist of only numbers",
		}),
});

const { success, errors } = await validateFormData(params, userForm);

if (success) {
	const db = await getDB();

	const userId = Astro.locals.user?.id ?? throwError("No user found");

	try {
		await db
			.updateTable("public.user")
			.set({
				name: params.nickname,
			})
			.where("id", "=", userId)
			.executeTakeFirstOrThrow();
	} catch (error) {
		errors.nickname = {
			message: "Nickname is already taken",
		};
	}
}
---
<LoggedIn errors={errors} nickname={params.nickname} />