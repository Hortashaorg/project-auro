---
import "./main.css";
import Navbar from "@sections/navbar/Navbar.astro";

interface Props {
	title: string;
	id?: string;
}

const { title, ...restProps } = Astro.props;
---

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };
  const isDark = getThemePreference() === 'dark';
  document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
 
  if (typeof localStorage !== 'undefined') {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    });
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
  }
  
  document.addEventListener('alpine:init', () => {
      Alpine.data('themeData', () => ({
          isDarkMode: document.documentElement.classList.contains('dark'),
          
          themeToggle() {
              this.isDarkMode = !this.isDarkMode;
              document.documentElement.classList.toggle('dark', this.isDarkMode);
          }
      }));
  });
</script>

<!doctype html>
<html lang="en" id="page">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <script src="https://unpkg.com/htmx.org@2.0.0"></script>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="dark:bg-background-dark bg-background-light">
    <Navbar id="navbar" />
    <div class="container mx-auto p-4">
      <div {...restProps}>
        <slot />
      </div>
    </div>
  </body>
</html>
