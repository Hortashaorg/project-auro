---
import "./main.css";
import { getDB } from "@package/database";
import Navbar from "@sections/navbar/Navbar.astro";

interface Props {
	title: string;
}

const accessToken = Astro.cookies.get("access_token")?.value;
const { title } = Astro.props;

const db = await getDB();

const userWithAvatar = Astro.locals.account?.id
	? await db
			.selectFrom("account")
			.innerJoin("asset", "account.avatarAssetId", "asset.id")
			.where("account.id", "=", Astro.locals.account.id)
			.select("asset.url")
			.executeTakeFirstOrThrow()
	: undefined;
---

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };
  const isDark = getThemePreference() === 'dark';
  document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
 
  if (typeof localStorage !== 'undefined') {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    });
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
  }

  const themeToggle = () => {
    const isDark = document.documentElement.classList.contains('dark');
    if(isDark) {
      document.documentElement.classList.remove("dark")
    } else {
      document.documentElement.classList.add("dark")
    }
  }
</script>

<!doctype html>
<html lang="en" id="page">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <script src="https://unpkg.com/htmx.org@2.0.0"></script>
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="dark:bg-background-dark bg-background-light">
    <div id="navbar">
      <Navbar
        loggedIn={accessToken !== undefined}
        avatarUrl={userWithAvatar?.url}
      />
    </div>
    <div class="container mx-auto p-4">
      <slot />
    </div>
  </body>
</html>
